package com.cpj.openstack.test;

import com.cpj.openstack.Authenticate;
import com.cpj.openstack.Compute;
import com.cpj.openstack.KeyStone;
import org.junit.Test;
import org.openstack4j.api.OSClient;
import org.openstack4j.api.types.Facing;
import org.openstack4j.model.compute.Server;
import org.openstack4j.model.compute.VNCConsole;
import org.openstack4j.model.identity.Tenant;
import org.openstack4j.model.identity.User;

import java.util.ArrayList;
import java.util.List;


/**
 * Created by chenpengjiang on 2016/3/8.
 */
public class opentest {

    @Test
    public void testv3() {
        Authenticate authenticate = new Authenticate();
        OSClient os = null;
        try {
            os = authenticate.logauth("10.0.0.11","admin","root1","admin", Facing.ADMIN);
        } catch (Exception e) {
            e.printStackTrace();
        }
        List<? extends User> users =  os.identity().users().list();
        List<? extends Tenant> tenants = os.identity().tenants().list();
        System.out.print(users);
    }

    @Test
    public void testold(){
        Authenticate authenticate = new Authenticate();
        OSClient os = authenticate.logauthold("10.0.0.11","admin","admin","root",Facing.ADMIN);
        List<? extends User> users = os.identity().users().list();
        for(int i=0;i<users.size();i++){
            System.out.print(users.get(i).getName()+"\n");

        }
    }
    @Test
    public void testkeystone(){
        Authenticate authenticate = new Authenticate();
        KeyStone keyStone = new KeyStone();
        OSClient os = authenticate.logauthold("10.0.0.11","admin","admin","root",Facing.ADMIN);
        Integer flag = keyStone.projectdelete(os,"e92a918c0d274fbfa81e55a9f8b69032");
        System.out.print(flag);
    }
    @Test
    public void testvnc(){
        Authenticate authenticate = new Authenticate();
        OSClient os = authenticate.logauth("10.0.0.11","demo","root","demo",Facing.INTERNAL);
        List<? extends Server> servers = os.compute().servers().list();
        String serverId = servers.get(0).getId();
        System.out.print(serverId);
        VNCConsole console = os.compute().servers().getVNCConsole(serverId, VNCConsole.Type.NOVNC);
        System.out.print(console.getURL());
    }
    @Test
    public void testfa(){
        Authenticate authenticate = new Authenticate();
        OSClient os = authenticate.logauth("10.0.0.11","admin","root","admin",Facing.ADMIN);
        Compute compute = new Compute();
     //   compute.flavorcreate(os,"testha",100,2,100);
    }
    @Test
    public void testimages(){
        Authenticate authenticate = new Authenticate();
        OSClient os = authenticate.logauth("10.0.0.11","admin","root","admin",Facing.PUBLIC);
        Compute compute = new Compute();
        List<String> list = new ArrayList<String>();
        list.add("20aece88-62ab-4b48-8df8-60e23fba0ffe");
        Server server = compute.bootserver(os,"测试","1","00ec05ac-4889-49e3-ad6a-1c4514cf09e6",list);
        System.out.print(server.getLinks());

    }

    @Test
    public void testgetServer(){
        Authenticate authenticate = new Authenticate();
//        OSClient os = authenticate.logauth("10.0.0.11","admin","root","admin",Facing.ADMIN);
        OSClient os_internal = authenticate.logauthold("10.0.0.11","demo","demo","root",Facing.INTERNAL);
        Compute compute = new Compute();
        List<? extends Server> servers= compute.Servergetall(os_internal,false);
        System.out.print(servers);

        //   compute.flavorcreate(os,"testha",100,2,100);
    }

}
